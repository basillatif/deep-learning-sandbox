# -*- coding: utf-8 -*-
"""resnet_vehicles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B9jOwhfbxUQJ2fWZHB-CN9f3flIUj5Xk
"""

from torchvision import models, transforms
import torch
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import os

class VehicleClassifier:
    def __init__(self):
        # Initialize ResNet model
        print("Loading ResNet model...")
        self.model = models.resnet101(pretrained=True)
        self.model.eval()

        # Define image preprocessing
        self.preprocess = transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]
            )])

        # Define vehicle-related ImageNet classes with more precise indices
        self.vehicle_categories = {
            'car': [511, 512, 513, 627, 751],      # sports_car, car_wheel, convertible, limousine
            'truck': [555, 569, 867, 864, 571],    # truck types
            'motorcycle': [670, 671, 672, 673, 674], # motorcycle types
            'bicycle': [444, 445, 446, 447, 671],   # bicycle types
            'boat': [472, 484, 554, 625, 814]      # boat types
        }
        print("Model ready for vehicle classification!")

    def process_image(self, image_path):
        try:
            # Verify image exists
            if not os.path.exists(image_path):
                raise FileNotFoundError(f"Image not found at {image_path}")

            # Load and preprocess image
            img = Image.open(image_path)
            img_t = self.preprocess(img)
            batch_t = torch.unsqueeze(img_t, 0)

            # Get model predictions
            with torch.no_grad():
                out = self.model(batch_t)

            # Get probabilities
            probabilities = torch.nn.functional.softmax(out[0], dim=0)

            # Calculate vehicle category scores with enhanced probability handling
            vehicle_scores = {}
            for category, indices in self.vehicle_categories.items():
                category_score = sum(probabilities[idx].item() for idx in indices)
                vehicle_scores[category] = category_score * 100

            return vehicle_scores, img

        except Exception as e:
            print(f"Error processing image: {str(e)}")
            return None, None

    def plot_results(self, scores, img=None):
        if scores is None:
            print("No scores to plot!")
            return

        # Create figure with two subplots if we have an image
        if img is not None:
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

            # Plot image
            ax1.imshow(img)
            ax1.axis('off')
            ax1.set_title('Input Image')

            # Plot scores
            categories = list(scores.keys())
            values = list(scores.values())
            bars = ax2.bar(categories, values)
            ax2.set_title('Vehicle Category Confidence Scores')
            ax2.set_xlabel('Vehicle Type')
            ax2.set_ylabel('Confidence Score (%)')
        else:
            # Just plot scores
            plt.figure(figsize=(10, 6))
            categories = list(scores.keys())
            values = list(scores.values())
            bars = plt.bar(categories, values)
            plt.title('Vehicle Category Confidence Scores')
            plt.xlabel('Vehicle Type')
            plt.ylabel('Confidence Score (%)')

        # Add value labels on top of each bar
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height,
                    f'{height:.1f}%',
                    ha='center', va='bottom')

        plt.ylim(0, max(values) + 10)  # Adjust y-axis to fit the data better
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

        # Print top vehicle category
        top_category = max(scores.items(), key=lambda x: x[1])
        print(f"\nMost likely vehicle category: {top_category[0].upper()} with {top_category[1]:.1f}% confidence")
        if top_category[1] < 1.0:
            print("Note: Low confidence scores suggest this may not be a vehicle image.")

# Test the classifier
def test_classifier(image_path):
    print(f"\nAnalyzing image: {image_path}")
    classifier = VehicleClassifier()
    scores, img = classifier.process_image(image_path)
    if scores:
        classifier.plot_results(scores, img)

# Test with a car image
test_classifier('car.jpg')
test_classifier('truck.jpg')